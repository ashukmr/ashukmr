1 K-Means Clustering

install.packages("dplyr")
install.packages("ggplot2")
install.packages("ggfortify")
library("ggplot2")
library("dplyr")
library("ggfortify")
summary(iris)
head(iris)
data <- select(iris, c(1:4))
kmean <- kmeans(data, 3)
kmean$centers
autoplot(kmean, data, frame = TRUE)



------------------------------------------------------------------------------------
2 Apriori algorithm

install.packages("arules")
install.packages("arulesViz")
install.packages("RColorBrewer")

# Loading Libraries
library(arules)
library(arulesViz)
library(RColorBrewer)
 
# import dataset
data("Groceries")
 
# using apriori() function
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf = 0.2))
 
# using inspect() function
inspect(rules[1:10])
 
# using itemFrequencyPlot() function
arules::itemFrequencyPlot(Groceries, topN = 20,col = brewer.pal(8, 'Pastel2'),                     main = 'Relative Item Frequency Plot', type = "relative", ylab = "Item Frequency (Relative)")
------------------------------------------------------------------------------------
3 Linear Regression

#######Simple Linear regression
years_of_exp = c(7,5,1,3) 
salary_in_lakhs = c(21,13,6,8)
employee.data = data.frame(years_of_exp, salary_in_lakhs) 
employee.data
model <- lm(salary_in_lakhs ~ years_of_exp, data = employee.data) 
summary(model)
plot(salary_in_lakhs ~ years_of_exp, data = employee.data) 
abline(model)


------------------------------------------------------------------------------------
4 Decision Tree

install.packages("party")
install.packages("datasets")
install.packages("caTools")
install.packages("dplyr")
install.packages("magrittr")

library(datasets)
library(caTools)
library(party)
library(dplyr)
library(magrittr)

data("readingSkills")
head(readingSkills)

sample_data = sample.split(readingSkills, SplitRatio = 0.8)
train_data <- subset(readingSkills, sample_data == TRUE)
test_data <- subset(readingSkills, sample_data == FALSE)

model<- ctree(nativeSpeaker ~ ., train_data)
plot(model)